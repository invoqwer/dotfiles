#!/bin/bash
# Generate alacritty-dev.yml and alacritty.yml
# from alacritty-template.yml. Sets: colors, env vars
# Requires 'jq'

# for killing within a function
trap "exit 1" TERM
PID=$$

CURR="$(dirname "$(realpath "$0")")"
COLORS="$CURR/colors.json"
TEMPLATE="$CURR/alacritty-template.yml"

# to generate
LOCAL_CONF="$CURR/alacritty.yml"
REMOTE_CONF="$CURR/alacritty-dev.yml"

# create files if they dont exist
# if they do exist, delete and create them with template contents
function replace_files () {
    cat "$TEMPLATE" > "$LOCAL_CONF"
    cat "$TEMPLATE" > "$REMOTE_CONF"
}

# $1 = jq key selector
function get_color () {
    RES=$(cat "$COLORS" | jq "$1")
    
    if [[ $RES == "null" ]]; then
        1>&2 echo "key $1 does not exist"
        kill -s TERM $PID
    fi
    
    # remove leading and ending quotation marks
    RES="${RES%\"}"
    RES="${RES#\"}"

    echo $RES
}

# $1 = alacritty color key
# $2 = map name
# $3 = level
function make_yaml () {    
    if [[ "$3" -eq 0 ]]; then
        PARENT_PAD=""
    else
        PARENT_PAD=$(printf '\ %.0s' $(seq 1 $3))
    fi
    CHILD_PAD="$PARENT_PAD\ \ "

    STR="$PARENT_PAD$1:"
    for i in $(eval echo '${!'"$2"'[@]}')
    do
        STR="$STR\n$CHILD_PAD$i: '$(eval echo '${'"$2"'['"$i"']}')'"
    done

    echo "$STR\n"
}

# insert yaml content before a given line
# $1 = parent level string to match
# $2 = child level string to match, (search for only instances after parent)
# $3 = yaml to insert, before the line of the first string match
# $4 = file path
function insert_yaml () {
    # find line num for "parent" level pattern
    TOP_PAT_LINE=$(grep -n "^$1$" "$4" | awk -F'[:]' '{ print $1 }')

    # find instances of "child" after "parent", take the first match
    CHILD_PAT_LINE=$(tail -n "+$TOP_PAT_LINE" "$4" | grep -n "$2$" | head -n 1 | awk -F'[:]' '{ print $1 }')
    CHILD_PAT_LINE=$(($CHILD_PAT_LINE + $TOP_PAT_LINE - 1))

    # insert before line
    sed -i "$CHILD_PAT_LINE i $3" "$4"
}

# create new config files from template
replace_files

# mapping: alacritty keys to colors
declare -A cmap_normal
cmap_normal[black]=$(get_color ".BLUE._1")
cmap_normal[red]=$(get_color ".RED._1")
cmap_normal[green]=$(get_color ".GREEN._1")
cmap_normal[yellow]=$(get_color ".YELLOW._2")
cmap_normal[blue]=$(get_color ".BLUE._2")
cmap_normal[magenta]=$(get_color ".PURPLE._2")
cmap_normal[cyan]=$(get_color ".BLUE._4")
cmap_normal[white]=$(get_color ".WHITE.true")

declare -A cmap_primary_local
cmap_primary_local[background]=$(get_color ".BLACK.true")
cmap_primary_local[foreground]=$(get_color ".WHITE.true")

declare -A cmap_primary_remote
cmap_primary_remote[background]=$(get_color ".BLUE._5")
cmap_primary_remote[foreground]=$(get_color ".WHITE.true")

NORMAL_COLORS=$(make_yaml "normal" "cmap_normal" "2")

LOCAL_PRIMARY_COLORS=$(make_yaml "primary" "cmap_primary_local" "2")
REMOTE_PRIMARY_COLORS=$(make_yaml "primary" "cmap_primary_remote" "2")

insert_yaml 'colors:' 'normal:' "$NORMAL_COLORS" "$LOCAL_CONF"
insert_yaml 'colors:' 'primary:' "$LOCAL_PRIMARY_COLORS" "$LOCAL_CONF"

insert_yaml 'colors:' 'normal:' "$NORMAL_COLORS" "$REMOTE_CONF"
insert_yaml 'colors:' 'primary:' "$REMOTE_PRIMARY_COLORS" "$REMOTE_CONF"

# mapping: env vars
declare -A envmap_local
envmap_local[TERM]="alacritty"

declare -A envmap_remote
envmap_remote[TERM]="xterm-256color"

LOCAL_ENV=$(make_yaml "env" "envmap_local" "0")
REMOTE_ENV=$(make_yaml "env" "envmap_remote" "0")

insert_yaml '# env:' 'TERM:' "$LOCAL_ENV" "$LOCAL_CONF"
insert_yaml '# env:' 'TERM:' "$REMOTE_ENV" "$REMOTE_CONF"